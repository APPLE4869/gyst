/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Example API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost:3000".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface DocumentForm
 */
export interface DocumentForm {
    /**
     * 
     * @type {string}
     * @memberof DocumentForm
     */
    body: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentForm
     */
    title: string;
}

/**
 * 
 * @export
 * @interface DocumentView
 */
export interface DocumentView {
    /**
     * 
     * @type {string}
     * @memberof DocumentView
     */
    body: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentView
     */
    bodyHtml: string;
    /**
     * 
     * @type {number}
     * @memberof DocumentView
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DocumentView
     */
    title: string;
}

/**
 * 
 * @export
 * @interface UserView
 */
export interface UserView {
    /**
     * 
     * @type {number}
     * @memberof UserView
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserView
     */
    name: string;
}


/**
 * DocumentsControllerApi - fetch parameter creator
 * @export
 */
export const DocumentsControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary document
         * @param {number} id id
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentUsingGET(id: number, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling documentUsingGET.');
            }
            const localVarPath = `/api/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listDocuments
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDocumentsUsingGET(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/documents`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary submitDocument
         * @param {DocumentForm} form form
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitDocumentUsingPOST(form: DocumentForm, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            // verify required parameter 'form' is not null or undefined
            if (form === null || form === undefined) {
                throw new RequiredError('form','Required parameter form was null or undefined when calling submitDocumentUsingPOST.');
            }
            const localVarPath = `/api/documents`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(form || {});

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateDocument
         * @param {DocumentForm} form form
         * @param {number} id id
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentUsingPATCH(form: DocumentForm, id: number, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            // verify required parameter 'form' is not null or undefined
            if (form === null || form === undefined) {
                throw new RequiredError('form','Required parameter form was null or undefined when calling updateDocumentUsingPATCH.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateDocumentUsingPATCH.');
            }
            const localVarPath = `/api/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(form || {});

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsControllerApi - functional programming interface
 * @export
 */
export const DocumentsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary document
         * @param {number} id id
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentUsingGET(id: number, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentView> {
            const localVarFetchArgs = DocumentsControllerApiFetchParamCreator(configuration).documentUsingGET(id, nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary listDocuments
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDocumentsUsingGET(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DocumentView>> {
            const localVarFetchArgs = DocumentsControllerApiFetchParamCreator(configuration).listDocumentsUsingGET(nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary submitDocument
         * @param {DocumentForm} form form
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitDocumentUsingPOST(form: DocumentForm, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentView> {
            const localVarFetchArgs = DocumentsControllerApiFetchParamCreator(configuration).submitDocumentUsingPOST(form, nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary updateDocument
         * @param {DocumentForm} form form
         * @param {number} id id
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentUsingPATCH(form: DocumentForm, id: number, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentView> {
            const localVarFetchArgs = DocumentsControllerApiFetchParamCreator(configuration).updateDocumentUsingPATCH(form, id, nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DocumentsControllerApi - factory interface
 * @export
 */
export const DocumentsControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary document
         * @param {number} id id
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentUsingGET(id: number, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return DocumentsControllerApiFp(configuration).documentUsingGET(id, nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
        /**
         * 
         * @summary listDocuments
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDocumentsUsingGET(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return DocumentsControllerApiFp(configuration).listDocumentsUsingGET(nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
        /**
         * 
         * @summary submitDocument
         * @param {DocumentForm} form form
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitDocumentUsingPOST(form: DocumentForm, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return DocumentsControllerApiFp(configuration).submitDocumentUsingPOST(form, nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
        /**
         * 
         * @summary updateDocument
         * @param {DocumentForm} form form
         * @param {number} id id
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentUsingPATCH(form: DocumentForm, id: number, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return DocumentsControllerApiFp(configuration).updateDocumentUsingPATCH(form, id, nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
    };
};

/**
 * DocumentsControllerApi - object-oriented interface
 * @export
 * @class DocumentsControllerApi
 * @extends {BaseAPI}
 */
export class DocumentsControllerApi extends BaseAPI {
    /**
     * 
     * @summary document
     * @param {} id id
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsControllerApi
     */
    public documentUsingGET(id: number, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return DocumentsControllerApiFp(this.configuration).documentUsingGET(id, nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary listDocuments
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsControllerApi
     */
    public listDocumentsUsingGET(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return DocumentsControllerApiFp(this.configuration).listDocumentsUsingGET(nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary submitDocument
     * @param {} form form
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsControllerApi
     */
    public submitDocumentUsingPOST(form: DocumentForm, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return DocumentsControllerApiFp(this.configuration).submitDocumentUsingPOST(form, nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary updateDocument
     * @param {} form form
     * @param {} id id
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsControllerApi
     */
    public updateDocumentUsingPATCH(form: DocumentForm, id: number, nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return DocumentsControllerApiFp(this.configuration).updateDocumentUsingPATCH(form, id, nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

}

/**
 * UserControllerApi - fetch parameter creator
 * @export
 */
export const UserControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingDELETE(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingGET(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingHEAD(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingOPTIONS(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingPATCH(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingPOST(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingPUT(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameValue !== undefined) {
                localVarQueryParameter['name.value'] = nameValue;
            }

            if (emailValue !== undefined) {
                localVarQueryParameter['email.value'] = emailValue;
            }

            if (updatedDatetimeValue !== undefined) {
                localVarQueryParameter['updatedDatetime.value'] = (updatedDatetimeValue as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingDELETE(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserView> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).userUsingDELETE(nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingGET(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserView> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).userUsingGET(nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingHEAD(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserView> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).userUsingHEAD(nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingOPTIONS(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserView> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).userUsingOPTIONS(nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingPATCH(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserView> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).userUsingPATCH(nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingPOST(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserView> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).userUsingPOST(nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingPUT(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserView> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).userUsingPUT(nameValue, emailValue, updatedDatetimeValue, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingDELETE(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return UserControllerApiFp(configuration).userUsingDELETE(nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingGET(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return UserControllerApiFp(configuration).userUsingGET(nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingHEAD(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return UserControllerApiFp(configuration).userUsingHEAD(nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingOPTIONS(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return UserControllerApiFp(configuration).userUsingOPTIONS(nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingPATCH(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return UserControllerApiFp(configuration).userUsingPATCH(nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingPOST(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return UserControllerApiFp(configuration).userUsingPOST(nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
        /**
         * 
         * @summary user
         * @param {string} [nameValue] 
         * @param {string} [emailValue] 
         * @param {Date} [updatedDatetimeValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsingPUT(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
            return UserControllerApiFp(configuration).userUsingPUT(nameValue, emailValue, updatedDatetimeValue, options)(fetch, basePath);
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary user
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userUsingDELETE(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return UserControllerApiFp(this.configuration).userUsingDELETE(nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary user
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userUsingGET(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return UserControllerApiFp(this.configuration).userUsingGET(nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary user
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userUsingHEAD(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return UserControllerApiFp(this.configuration).userUsingHEAD(nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary user
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userUsingOPTIONS(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return UserControllerApiFp(this.configuration).userUsingOPTIONS(nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary user
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userUsingPATCH(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return UserControllerApiFp(this.configuration).userUsingPATCH(nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary user
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userUsingPOST(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return UserControllerApiFp(this.configuration).userUsingPOST(nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary user
     * @param {} [nameValue] 
     * @param {} [emailValue] 
     * @param {} [updatedDatetimeValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userUsingPUT(nameValue?: string, emailValue?: string, updatedDatetimeValue?: Date, options?: any) {
        return UserControllerApiFp(this.configuration).userUsingPUT(nameValue, emailValue, updatedDatetimeValue, options)(this.fetch, this.basePath);
    }

}

